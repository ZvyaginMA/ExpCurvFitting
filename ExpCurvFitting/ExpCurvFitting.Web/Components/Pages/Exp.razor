@page "/expfitting"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Forms
@using ExpCurvFitting.Application
@using ExpCurvFitting.Core
@using ExpCurvFitting.Web.Models
@inject ExcelService _excelService
@inject ExpModel _expModel;


<PageTitle>Exponents curve fitting</PageTitle>

<h1>Восстановление полинома из экспонент</h1>

<tr>
    <td>Количество экспонент</td>
    <td><InputFile OnChange="HandleSelected" MaxAllowedSize="10485760"/></td>
</tr>


@if (inputData is not null)
{
    if (IsCalc == Status.NoStarted)
    {
        <p>Запустите расчет</p>
        <tr>
            <td>Количество экспонент</td>
            <td><input type="number" @bind="numberOfExponents" /></td>
        </tr>
    }
    else if (IsCalc == Status.InProgress)
    {
        <p><em>Расчет...</em></p>
    }
    else
    {
        <p>
            <tr>Tol @modelResult.TolValue</tr>
            <tr>RMSE @modelResult.RmseForCenter</tr>
            <table class="table">
                <thead>
                    <tr>
                        <th>a</th>
                        <th>b</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in modelResult.GetPoints())
                    {
                        <tr>
                            <td>@item.Item1</td>
                            <td>@item.Item2</td>
                        </tr>
                    }
                </tbody>
            </table>
        </p>
        <tr>
            <td>Количество экспонент</td>
            <td><input type="number" @bind="numberOfExponents" /></td>
        </tr>

    }
    <tr>
        <th>
            <button @onclick="Calc" class="btn btn-primary">Начать расчет</button>
        </th>
        <th>
            <button @onclick="SetPenatlyOptions" class="btn btn-primary">Задать границы и штрафы</button>
        </th>
    </tr>
}
@if (IsSettingPenatlyOptions)
{
    <tr>
        <td>CostA</td>
        <td><input type="text" @bind="penatlyOptions.CostB" /></td>
        <td>CostB</td>
        <td><input type="text" @bind="penatlyOptions.CostB" /></td>
    </tr>
    <table class="table">
        <thead>
            <tr>
                <th>a_lb</th>
                <th>a_ub</th>
                <th>b_lb</th>
                <th>b_ub</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in penatlyOptions.Items)
            {
                <tr>
                    <td><input type="text" @bind="item.ALb" /></td>
                    <td><input type="text" @bind="item.AUb" /></td>
                    <td><input type="text" @bind="item.BLb" /></td>
                    <td><input type="text" @bind="item.BUb" /></td>
                </tr>
            }
        </tbody>
    </table>
}


@if (!IsLoading)
{
    <p>Загрузите данные</p>
}
else if (inputData == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <p>@(inputData is not null ? $"Загружено {inputData.X.Length} точек" : "")</p>

    <table class="table">
        <thead>
            <tr>
                <th>X</th>
                <th>YMid</th>
                <th>YRad</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in inputData!.GetPoints())
            {
                <tr>
                    <td>@item.Item1</td>
                    <td>@item.Item2</td>
                    <td>@item.Item3</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    enum Status
    {
        NoStarted,
        InProgress,
        Done
    };

    private int numberOfExponents;
    private ExcelService.Result inputData = null;
    private ExpModel.Result modelResult = null;
    private bool IsLoading;
    private Status IsCalc = Status.NoStarted;
    private PenatlyOptionsDto? penatlyOptions = null;
    private bool IsSettingPenatlyOptions;

    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        try
        {
            MemoryStream ms = new MemoryStream();
            IsLoading = true;
            await e.File.OpenReadStream().CopyToAsync(ms);
            inputData = _excelService.LoadDateFromFile(ms);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private void SetPenatlyOptions()
    {
        penatlyOptions = new PenatlyOptionsDto(numberOfExponents);
        IsSettingPenatlyOptions = true;
    }

    private async Task Calc()
    {
        try
        {
            if (numberOfExponents <= 0)
            {
                return;
            }
            IsCalc = Status.InProgress;
            await _expModel.FitForNonIntervalX(inputData.X, inputData.YMid, inputData.YRad, penatlyOptions?.GetPenatlyOptions());
            modelResult = _expModel.GetResult();
            IsCalc = Status.Done;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
}
