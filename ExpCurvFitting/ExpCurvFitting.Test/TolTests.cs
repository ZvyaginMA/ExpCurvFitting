using ExpCurvFitting.Core.Models;
using ExpCurvFitting.Core.Optimization;
using ExpCurvFitting.Core.RecognizingFunctions;
using FluentAssertions;
using MathNet.Numerics.LinearAlgebra.Double;

namespace ExpCurvFitting.Test
{
    public class TolTests
    {
        [Fact]
        public void SuccessCalcProperties()
        {
            var xLb = new DenseVector([1.0, 2.0]);
            var xUb = new DenseVector([1.0, 2.0]);
            var yLb = new DenseVector([1.0, 2.0]);
            var yUb = new DenseVector([1.0, 2.0]);
            var tol = new ExpTol(xLb, xUb, yLb, yUb);

            var a = new DenseVector([1.0, 2.0]);
            var b = new DenseVector([1.0, 2.0]);

            var tolResult = tol.TolValue(a, b);
            var gradAResult = tol.GradA(a, b);
            var gradBResult = tol.GradB(a, b);
            tolResult.Should().BeInRange(-1.82804, -1.82803);
            gradAResult[0].Should().BeInRange(0.135335, 0.135336);
            gradAResult[1].Should().BeInRange(0.018315, 0.018316);
            gradBResult[0].Should().BeInRange(-0.270671, -0.270670);
            gradBResult[1].Should().BeInRange(-0.073263, -0.073262);
        }

        [Fact]
        public void SuccessOptimization()
        {
            var xLb = new DenseVector([1.0, 2.0, 3.0, 4, 5, 6]);
            var xUb = new DenseVector([1.0, 2.0, 3.0, 4, 5, 6]);
            var yLb = new DenseVector([2.51, 2.04, 1.67, 1.37, 1.12, 0.93]) - 0.1;
            var yUb = new DenseVector([2.51, 2.04, 1.67, 1.37, 1.12, 0.93]) + 0.1;
            var tol = new ExpTol(xLb, xUb, yLb, yUb);
            var result = tol.Optimization(new RalgbSubgradientMinimizer(1e-5, 1000), new DenseVector([1.0, 2.0, 5.0, 4.0]));
            result.TolValue.Should().BeInRange(0.0942, 0.0943);
        }

        [Fact]
        public async Task SuccessMultistartOptimization()
        {
            var xLb = new DenseVector([1.0, 2.0, 3.0, 4, 5, 6]);
            var xUb = new DenseVector([1.0, 2.0, 3.0, 4, 5, 6]);
            var yLb = new DenseVector([2.51, 2.04, 1.67, 1.37, 1.12, 0.93]) - 0.1;
            var yUb = new DenseVector([2.51, 2.04, 1.67, 1.37, 1.12, 0.93]) + 0.1;
            var tol = new ExpTol(xLb, xUb, yLb, yUb);
            var result = await tol.MultistartOptimization(new RalgbSubgradientMinimizer(1e-5, 1000), 20, 4);
            result.TolValue.Should().BeInRange(0.096, 0.097);
        }

        [Fact]
        public async Task Test()
        {
            var x = new[] { 2.6451875, 2.6456875, 2.6461875, 2.6466875, 2.6471875, 2.6476875, 2.6486875, 2.6503125, 2.6523125, 2.6545625, 2.6565625, 2.6594375, 2.6614375, 2.6656875, 2.6694375, 2.830625, 3.1468125, 3.463, 3.7791875, 4.095375, 4.4115625, 4.72775, 5.0439375, 5.516375, 6.1450625, 6.77375, 7.4024375, 8.031125, 8.6598125, 9.2885, 9.9171875, 10.858375, 12.1120625, 13.36575, 14.6194375, 15.873125, 17.1268125, 18.3805, 19.6341875, 21.512875, 24.0165625, 26.52025, 29.0239375, 31.527625, 34.0313125, 36.535, 39.0386875, 42.792375, 47.7960625, 52.79975, 57.8034375, 62.807125, 67.8108125, 72.8145, 77.8181875, 85.321875, 95.3255625, 105.32925, 115.3329375, 125.336625, 135.3403125, 145.344, 155.3476875, 170.351375, 190.3550625, 210.35875, 230.3624375, 250.366125, 270.3698125, 290.3735, 310.3771875, 330.380875, 350.3845625, 370.38825, 390.3919375, 410.395625, 430.3993125, 450.403, 470.4066875, 490.410375, 510.4140625, 530.41775, 550.4214375, 570.425125, 590.4288125, 610.4325, 630.4361875, 650.439875, 670.4435625, 690.44725, 710.4509375, 730.454625, 750.4583125, 770.462, 790.4656875, 810.469375, 830.4730625, 850.47675, 870.4804375, 890.484125, 910.4878125, 930.4915, 950.4951875, 970.498875, 990.5025625, 1010.50625, 1030.5099375 };
            var y = new[] {0.1387, 0.1256, 0.1377, 0.1436, 0.1305, 0.1275, 0.1309, 0.1373, 0.1343, 0.1377, 0.1356, 0.138, 0.1357, 0.1409, 0.1392, 0.1621, 0.1917, 0.2049, 0.208, 0.2053, 0.1993, 0.1912, 0.1823, 0.1684, 0.1502, 0.1336, 0.1188, 0.1058, 0.09451, 0.08463, 0.076, 0.06523, 0.05376, 0.04483, 0.03782, 0.03225, 0.02774, 0.02409, 0.02108, 0.01752, 0.01395, 0.01135, 0.009399, 0.007897, 0.006729, 0.005791, 0.005038, 0.004166, 0.003302, 0.002673, 0.002207, 0.001851, 0.00157, 0.001349, 0.00117, 0.0009622, 0.0007595, 0.0006157, 0.0005056, 0.0004231, 0.0003584, 0.0003046, 0.0002645, 0.0002166, 0.0001669, 0.0001356, 0.0001097, 8.973E-05, 7.782E-05, 6.097E-05, 5.479E-05, 4.703E-05, 3.993E-05, 3.5E-05, 3.141E-05, 2.651E-05, 2.476E-05, 2.112E-05, 2.055E-05, 1.649E-05, 1.754E-05, 1.529E-05, 1.252E-05, 1.323E-05, 1.151E-05, 7.815E-06, 1.078E-05, 8.568E-06, 6.875E-06, 8.092E-06, 9.024E-06, 6.635E-06, 5.687E-06, 8.087E-06, 5.832E-06, 3.938E-06, 8.823E-06, 5.423E-06, 2.613E-06, 6.291E-06, 5.865E-06, 1.962E-06, 4.644E-06, 5.11E-06, 4.18E-06, 2.956E-06, 4.757E-06};
            var yRad = new[] {0.234, 0.214, 0.203, 0.176, 0.188, 0.211, 0.157, 0.171, 0.163, 0.171, 0.164, 0.173, 0.161, 0.163, 0.155, 0.1, 0.041, 0.017, 0.007, 0.012, 0.016, 0.019, 0.022, 0.024, 0.025, 0.025, 0.025, 0.025, 0.024, 0.024, 0.022, 0.021, 0.02, 0.019, 0.018, 0.017, 0.016, 0.015, 0.015, 0.013, 0.013, 0.012, 0.012, 0.011, 0.013, 0.013, 0.013, 0.012, 0.014, 0.016, 0.018, 0.023, 0.023, 0.022, 0.024, 0.027, 0.035, 0.041, 0.049, 0.058, 0.071, 0.08, 0.103, 0.094, 0.123, 0.149, 0.188, 0.236, 0.283, 0.335, 0.408, 0.424, 0.53, 0.61, 0.72, 0.856, 0.85, 0.95, 0.952, 1.375, 1.164, 1.319, 1.883, 1.582, 1.781, 2.659, 1.871, 2.571, 2.843, 2.873, 2.33, 2.964, 3.745, 2.465, 3.669, 5.255, 2.434, 3.807, 8.603, 3.178, 3.306, 10.009, 4.183, 4.081, 4.822, 7.905, 4.141};

            var xLb = new DenseVector(x);
            var xUb = new DenseVector(x);
            var yVector = new DenseVector(y);
            var yVectorRad = new DenseVector(yRad);

            var aLb = new DenseVector([0.0, 0.0]);
            var aUb = new DenseVector([10.0, 10.0]);
            var bLb = new DenseVector([0.0, 0.0]);
            var bUb = new DenseVector([10.0, 10.0]);

            var penatlyOptions = new PenatlyOptions()
            {
                ALb = aLb,
                AUb = aUb,
                BLb = bLb,
                BUb = bUb,
                CostA = 5,
                CostB = 5,
            };

            var tol = new ExpTolWithPenatly(xLb, xUb, yVector - yVectorRad, yVector + yVectorRad, penatlyOptions);
            var result = tol.Optimization(new RalgbSubgradientMinimizer(1e-5, 1000), new DenseVector([1.0, 2.0, 2.0, 3.0]));

            result.TolValue.Should().BeInRange(0.005, 0.006);
        }

        [Fact]
        public async Task Test2()
        {
            var x = new[] { 2.6451875, 2.6456875, 2.6461875, 2.6466875, 2.6471875, 2.6476875, 2.6486875, 2.6503125, 2.6523125, 2.6545625, 2.6565625, 2.6594375, 2.6614375, 2.6656875, 2.6694375, 2.830625, 3.1468125, 3.463, 3.7791875, 4.095375, 4.4115625, 4.72775, 5.0439375, 5.516375, 6.1450625, 6.77375, 7.4024375, 8.031125, 8.6598125, 9.2885, 9.9171875, 10.858375, 12.1120625, 13.36575, 14.6194375, 15.873125, 17.1268125, 18.3805, 19.6341875, 21.512875, 24.0165625, 26.52025, 29.0239375, 31.527625, 34.0313125, 36.535, 39.0386875, 42.792375, 47.7960625, 52.79975, 57.8034375, 62.807125, 67.8108125, 72.8145, 77.8181875, 85.321875, 95.3255625, 105.32925, 115.3329375, 125.336625, 135.3403125, 145.344, 155.3476875, 170.351375, 190.3550625, 210.35875, 230.3624375, 250.366125, 270.3698125, 290.3735, 310.3771875, 330.380875, 350.3845625, 370.38825, 390.3919375, 410.395625, 430.3993125, 450.403, 470.4066875, 490.410375, 510.4140625, 530.41775, 550.4214375, 570.425125, 590.4288125, 610.4325, 630.4361875, 650.439875, 670.4435625, 690.44725, 710.4509375, 730.454625, 750.4583125, 770.462, 790.4656875, 810.469375, 830.4730625, 850.47675, 870.4804375, 890.484125, 910.4878125, 930.4915, 950.4951875, 970.498875, 990.5025625, 1010.50625, 1030.5099375 };
            var y = new[] { 0.1387, 0.1256, 0.1377, 0.1436, 0.1305, 0.1275, 0.1309, 0.1373, 0.1343, 0.1377, 0.1356, 0.138, 0.1357, 0.1409, 0.1392, 0.1621, 0.1917, 0.2049, 0.208, 0.2053, 0.1993, 0.1912, 0.1823, 0.1684, 0.1502, 0.1336, 0.1188, 0.1058, 0.09451, 0.08463, 0.076, 0.06523, 0.05376, 0.04483, 0.03782, 0.03225, 0.02774, 0.02409, 0.02108, 0.01752, 0.01395, 0.01135, 0.009399, 0.007897, 0.006729, 0.005791, 0.005038, 0.004166, 0.003302, 0.002673, 0.002207, 0.001851, 0.00157, 0.001349, 0.00117, 0.0009622, 0.0007595, 0.0006157, 0.0005056, 0.0004231, 0.0003584, 0.0003046, 0.0002645, 0.0002166, 0.0001669, 0.0001356, 0.0001097, 8.973E-05, 7.782E-05, 6.097E-05, 5.479E-05, 4.703E-05, 3.993E-05, 3.5E-05, 3.141E-05, 2.651E-05, 2.476E-05, 2.112E-05, 2.055E-05, 1.649E-05, 1.754E-05, 1.529E-05, 1.252E-05, 1.323E-05, 1.151E-05, 7.815E-06, 1.078E-05, 8.568E-06, 6.875E-06, 8.092E-06, 9.024E-06, 6.635E-06, 5.687E-06, 8.087E-06, 5.832E-06, 3.938E-06, 8.823E-06, 5.423E-06, 2.613E-06, 6.291E-06, 5.865E-06, 1.962E-06, 4.644E-06, 5.11E-06, 4.18E-06, 2.956E-06, 4.757E-06 };
            var yRad = new[] { 0.234, 0.214, 0.203, 0.176, 0.188, 0.211, 0.157, 0.171, 0.163, 0.171, 0.164, 0.173, 0.161, 0.163, 0.155, 0.1, 0.041, 0.017, 0.007, 0.012, 0.016, 0.019, 0.022, 0.024, 0.025, 0.025, 0.025, 0.025, 0.024, 0.024, 0.022, 0.021, 0.02, 0.019, 0.018, 0.017, 0.016, 0.015, 0.015, 0.013, 0.013, 0.012, 0.012, 0.011, 0.013, 0.013, 0.013, 0.012, 0.014, 0.016, 0.018, 0.023, 0.023, 0.022, 0.024, 0.027, 0.035, 0.041, 0.049, 0.058, 0.071, 0.08, 0.103, 0.094, 0.123, 0.149, 0.188, 0.236, 0.283, 0.335, 0.408, 0.424, 0.53, 0.61, 0.72, 0.856, 0.85, 0.95, 0.952, 1.375, 1.164, 1.319, 1.883, 1.582, 1.781, 2.659, 1.871, 2.571, 2.843, 2.873, 2.33, 2.964, 3.745, 2.465, 3.669, 5.255, 2.434, 3.807, 8.603, 3.178, 3.306, 10.009, 4.183, 4.081, 4.822, 7.905, 4.141 };

            var xLb = new DenseVector(x);
            var xUb = new DenseVector(x);
            var yVector = new DenseVector(y);
            var yVectorRad = new DenseVector(yRad);

            var aLb = new DenseVector([0.0, 0.0]);
            var aUb = new DenseVector([10.0, 10.0]);
            var bLb = new DenseVector([0.0, 0.0]);
            var bUb = new DenseVector([10.0, 10.0]);

            var penatlyOptions = new PenatlyOptions()
            {
                ALb = aLb,
                AUb = aUb,
                BLb = bLb,
                BUb = bUb,
                CostA = 5,
                CostB = 5,
            };

            var tol = new ExpTolWithPenatly(xLb, xUb, yVector - yVectorRad, yVector + yVectorRad, penatlyOptions);
            var result = await tol.MultistartOptimization(new RalgbSubgradientMinimizer(1e-5, 1000),10, 4);

            result.TolValue.Should().BeInRange(0.005, 0.006);
        }

        [Fact]
        public async Task Test3()
        {
            var x = new[] { 2.6451875, 2.6456875, 2.6461875, 2.6466875, 2.6471875, 2.6476875, 2.6486875, 2.6503125, 2.6523125, 2.6545625, 2.6565625, 2.6594375, 2.6614375, 2.6656875, 2.6694375, 2.830625, 3.1468125, 3.463, 3.7791875, 4.095375, 4.4115625, 4.72775, 5.0439375, 5.516375, 6.1450625, 6.77375, 7.4024375, 8.031125, 8.6598125, 9.2885, 9.9171875, 10.858375, 12.1120625, 13.36575, 14.6194375, 15.873125, 17.1268125, 18.3805, 19.6341875, 21.512875, 24.0165625, 26.52025, 29.0239375, 31.527625, 34.0313125, 36.535, 39.0386875, 42.792375, 47.7960625, 52.79975, 57.8034375, 62.807125, 67.8108125, 72.8145, 77.8181875, 85.321875, 95.3255625, 105.32925, 115.3329375, 125.336625, 135.3403125, 145.344, 155.3476875, 170.351375, 190.3550625, 210.35875, 230.3624375, 250.366125, 270.3698125, 290.3735, 310.3771875, 330.380875, 350.3845625, 370.38825, 390.3919375, 410.395625, 430.3993125, 450.403, 470.4066875, 490.410375, 510.4140625, 530.41775, 550.4214375, 570.425125, 590.4288125, 610.4325, 630.4361875, 650.439875, 670.4435625, 690.44725, 710.4509375, 730.454625, 750.4583125, 770.462, 790.4656875, 810.469375, 830.4730625, 850.47675, 870.4804375, 890.484125, 910.4878125, 930.4915, 950.4951875, 970.498875, 990.5025625, 1010.50625, 1030.5099375 };
            var y = new[] { 0.1387, 0.1256, 0.1377, 0.1436, 0.1305, 0.1275, 0.1309, 0.1373, 0.1343, 0.1377, 0.1356, 0.138, 0.1357, 0.1409, 0.1392, 0.1621, 0.1917, 0.2049, 0.208, 0.2053, 0.1993, 0.1912, 0.1823, 0.1684, 0.1502, 0.1336, 0.1188, 0.1058, 0.09451, 0.08463, 0.076, 0.06523, 0.05376, 0.04483, 0.03782, 0.03225, 0.02774, 0.02409, 0.02108, 0.01752, 0.01395, 0.01135, 0.009399, 0.007897, 0.006729, 0.005791, 0.005038, 0.004166, 0.003302, 0.002673, 0.002207, 0.001851, 0.00157, 0.001349, 0.00117, 0.0009622, 0.0007595, 0.0006157, 0.0005056, 0.0004231, 0.0003584, 0.0003046, 0.0002645, 0.0002166, 0.0001669, 0.0001356, 0.0001097, 8.973E-05, 7.782E-05, 6.097E-05, 5.479E-05, 4.703E-05, 3.993E-05, 3.5E-05, 3.141E-05, 2.651E-05, 2.476E-05, 2.112E-05, 2.055E-05, 1.649E-05, 1.754E-05, 1.529E-05, 1.252E-05, 1.323E-05, 1.151E-05, 7.815E-06, 1.078E-05, 8.568E-06, 6.875E-06, 8.092E-06, 9.024E-06, 6.635E-06, 5.687E-06, 8.087E-06, 5.832E-06, 3.938E-06, 8.823E-06, 5.423E-06, 2.613E-06, 6.291E-06, 5.865E-06, 1.962E-06, 4.644E-06, 5.11E-06, 4.18E-06, 2.956E-06, 4.757E-06 };
            var yRad = new[] { 0.234, 0.214, 0.203, 0.176, 0.188, 0.211, 0.157, 0.171, 0.163, 0.171, 0.164, 0.173, 0.161, 0.163, 0.155, 0.1, 0.041, 0.017, 0.007, 0.012, 0.016, 0.019, 0.022, 0.024, 0.025, 0.025, 0.025, 0.025, 0.024, 0.024, 0.022, 0.021, 0.02, 0.019, 0.018, 0.017, 0.016, 0.015, 0.015, 0.013, 0.013, 0.012, 0.012, 0.011, 0.013, 0.013, 0.013, 0.012, 0.014, 0.016, 0.018, 0.023, 0.023, 0.022, 0.024, 0.027, 0.035, 0.041, 0.049, 0.058, 0.071, 0.08, 0.103, 0.094, 0.123, 0.149, 0.188, 0.236, 0.283, 0.335, 0.408, 0.424, 0.53, 0.61, 0.72, 0.856, 0.85, 0.95, 0.952, 1.375, 1.164, 1.319, 1.883, 1.582, 1.781, 2.659, 1.871, 2.571, 2.843, 2.873, 2.33, 2.964, 3.745, 2.465, 3.669, 5.255, 2.434, 3.807, 8.603, 3.178, 3.306, 10.009, 4.183, 4.081, 4.822, 7.905, 4.141 };

            var xLb = new DenseVector(x);
            var xUb = new DenseVector(x);
            var yVector = new DenseVector(y);
            var yVectorRad = new DenseVector(yRad);

            var aLb = new DenseVector([0.0, 0.0]);
            var aUb = new DenseVector([10.0, 10.0]);
            var bLb = new DenseVector([0.0, 0.0]);
            var bUb = new DenseVector([10.0, 10.0]);

            var penatlyOptions = new PenatlyOptions()
            {
                ALb = aLb,
                AUb = aUb,
                BLb = bLb,
                BUb = bUb,
            };

            var tol = new ExpTolWithPenatly(xLb, xUb, yVector - yVectorRad, yVector + yVectorRad, penatlyOptions);
            var result = tol.Optimization(new RalgbSubgradientMinimizer(1e-5, 1000), new DenseVector([-0.11, -0.12, -0.13, -0.14]));

            result.TolValue.Should().BeInRange(0.005, 0.006);
        }
    }
}